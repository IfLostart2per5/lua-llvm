--
-- Warning: AUTOGENERATED DOCS.
--

--- Class "Builder".
--
module("Builder")

--- Create a new Builder object.
--
--  Context is optional 
-- @param ctx Must be of type <a href="Context.html">Context</a>.
-- @return <a href="Builder.html">Builder</a>.
-- @name Builder.create
function Builder.create(ctx)
end

--- Destroy this object (will be called by Garbage Collector).
--
-- @name Builder:dispose
function Builder:dispose()
end

--- object method.
--
-- @param bb Must be of type <a href="BasicBlock.html">BasicBlock</a>.
-- @name Builder:position_at_end
function Builder:position_at_end(bb)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_ret
function Builder:build_ret(lhs)
end

--- object method.
--
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_ret_void
function Builder:build_ret_void()
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_add
function Builder:build_add(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nswadd
function Builder:build_nswadd(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nuwadd
function Builder:build_nuwadd(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param rhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_fadd
function Builder:build_fadd(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_sub
function Builder:build_sub(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nswsub
function Builder:build_nswsub(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nuwsub
function Builder:build_nuwsub(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param rhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_fsub
function Builder:build_fsub(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_mul
function Builder:build_mul(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nswmul
function Builder:build_nswmul(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nuwmul
function Builder:build_nuwmul(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param rhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_fmul
function Builder:build_fmul(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_udiv
function Builder:build_udiv(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_exact_udiv
function Builder:build_exact_udiv(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_sdiv
function Builder:build_sdiv(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_exact_sdiv
function Builder:build_exact_sdiv(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param rhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_fdiv
function Builder:build_fdiv(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_urem
function Builder:build_urem(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_srem
function Builder:build_srem(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param rhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_frem
function Builder:build_frem(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_shl
function Builder:build_shl(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_lshr
function Builder:build_lshr(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_ashr
function Builder:build_ashr(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_and
function Builder:build_and(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_or
function Builder:build_or(lhs, rhs, name)
end

--- object method.
--
-- @param lhs Must be of type <a href="Value.html">Value</a>.
-- @param rhs Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_xor
function Builder:build_xor(lhs, rhs, name)
end

--- object method.
--
-- @param v Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_neg
function Builder:build_neg(v, name)
end

--- object method.
--
-- @param v Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nswneg
function Builder:build_nswneg(v, name)
end

--- object method.
--
-- @param v Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_nuwneg
function Builder:build_nuwneg(v, name)
end

--- object method.
--
-- @param v Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_fneg
function Builder:build_fneg(v, name)
end

--- object method.
--
-- @param v Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_not
function Builder:build_not(v, name)
end

--- object method.
--
-- @param Tv Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_malloc
function Builder:build_malloc(Tv, name)
end

--- object method.
--
-- @param ty Must be of type <a href="Type.html">Type</a>.
-- @param val Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_array_malloc
function Builder:build_array_malloc(ty, val, name)
end

--- object method.
--
-- @param ty Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_alloca
function Builder:build_alloca(ty, name)
end

--- object method.
--
-- @param ty Must be of type <a href="Type.html">Type</a>.
-- @param val Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_array_alloca
function Builder:build_array_alloca(ty, val, name)
end

--- object method.
--
-- @param ptr Must be of type <a href="Value.html">Value</a>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_free
function Builder:build_free(ptr)
end

--- object method.
--
-- @param ptr Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_load
function Builder:build_load(ptr, name)
end

--- object method.
--
-- @param val Must be of type <a href="Value.html">Value</a>.
-- @param ptr Must be of type <a href="Value.html">Value</a>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_store
function Builder:build_store(val, ptr)
end

--- object method.
--
-- @param ptr Must be of type <a href="Value.html">Value</a>.
-- @param Idx Must be of type <code>integer</code>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_Struct_GEP
function Builder:build_Struct_GEP(ptr, Idx, name)
end

--- object method.
--
-- @param Str Must be of type <code>string</code>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_global_string
function Builder:build_global_string(Str, name)
end

--- object method.
--
-- @param Str Must be of type <code>string</code>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_global_string_ptr
function Builder:build_global_string_ptr(Str, name)
end

--- object method.
--
-- @param Val Must be of type <a href="IntValue.html">IntValue</a>.
-- @param DestTy Must be of type <a href="IntType.html">IntType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="IntValue.html">IntValue</a>.
-- @name Builder:build_trunc
function Builder:build_trunc(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="IntValue.html">IntValue</a>.
-- @param DestTy Must be of type <a href="IntType.html">IntType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="IntValue.html">IntValue</a>.
-- @name Builder:build_zext
function Builder:build_zext(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="IntValue.html">IntValue</a>.
-- @param DestTy Must be of type <a href="IntType.html">IntType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="IntValue.html">IntValue</a>.
-- @name Builder:build_sext
function Builder:build_sext(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param DestTy Must be of type <a href="IntType.html">IntType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="IntValue.html">IntValue</a>.
-- @name Builder:build_fp_to_ui
function Builder:build_fp_to_ui(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param DestTy Must be of type <a href="IntType.html">IntType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="IntValue.html">IntValue</a>.
-- @name Builder:build_fp_to_si
function Builder:build_fp_to_si(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param DestTy Must be of type <a href="FloatType.html">FloatType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="FloatValue.html">FloatValue</a>.
-- @name Builder:build_ui_to_fp
function Builder:build_ui_to_fp(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="IntValue.html">IntValue</a>.
-- @param DestTy Must be of type <a href="FloatType.html">FloatType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="FloatValue.html">FloatValue</a>.
-- @name Builder:build_si_to_fp
function Builder:build_si_to_fp(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param DestTy Must be of type <a href="FloatType.html">FloatType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="FloatValue.html">FloatValue</a>.
-- @name Builder:build_fptrunc
function Builder:build_fptrunc(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param DestTy Must be of type <a href="FloatType.html">FloatType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="FloatValue.html">FloatValue</a>.
-- @name Builder:build_fpext
function Builder:build_fpext(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="Value.html">Value</a>.
-- @param DestTy Must be of type <a href="IntType.html">IntType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="IntValue.html">IntValue</a>.
-- @name Builder:build_ptr_to_int
function Builder:build_ptr_to_int(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="IntValue.html">IntValue</a>.
-- @param DestTy Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_int_to_ptr
function Builder:build_int_to_ptr(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="Value.html">Value</a>.
-- @param DestTy Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_bit_cast
function Builder:build_bit_cast(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="Value.html">Value</a>.
-- @param DestTy Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_addr_space_cast
function Builder:build_addr_space_cast(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="Value.html">Value</a>.
-- @param DestTy Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_zext_or_bit_cast
function Builder:build_zext_or_bit_cast(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="Value.html">Value</a>.
-- @param DestTy Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_sext_or_bit_cast
function Builder:build_sext_or_bit_cast(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="Value.html">Value</a>.
-- @param DestTy Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_trunc_or_bit_cast
function Builder:build_trunc_or_bit_cast(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="Value.html">Value</a>.
-- @param DestTy Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_ptr_cast
function Builder:build_ptr_cast(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="IntValue.html">IntValue</a>.
-- @param DestTy Must be of type <a href="IntType.html">IntType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="IntValue.html">IntValue</a>.
-- @name Builder:build_int_cast
function Builder:build_int_cast(Val, DestTy, name)
end

--- object method.
--
-- @param Val Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param DestTy Must be of type <a href="FloatType.html">FloatType</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="FloatValue.html">FloatValue</a>.
-- @name Builder:build_fpcast
function Builder:build_fpcast(Val, DestTy, name)
end

--- object method.
--
-- @param Op Must be of type <a href="IntPredicate.html">IntPredicate</a>.
-- @param lhs Must be of type <a href="IntValue.html">IntValue</a>.
-- @param rhs Must be of type <a href="IntValue.html">IntValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_icmp
function Builder:build_icmp(Op, lhs, rhs, name)
end

--- object method.
--
-- @param Op Must be of type <a href="RealPredicate.html">RealPredicate</a>.
-- @param lhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param rhs Must be of type <a href="FloatValue.html">FloatValue</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_fcmp
function Builder:build_fcmp(Op, lhs, rhs, name)
end

--- object method.
--
-- @param Ty Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_phi
function Builder:build_phi(Ty, name)
end

--- object method.
--
-- @param If Must be of type <a href="Value.html">Value</a>.
-- @param Then Must be of type <a href="Value.html">Value</a>.
-- @param Else Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_select
function Builder:build_select(If, Then, Else, name)
end

--- object method.
--
-- @param list Must be of type <a href="Value.html">Value</a>.
-- @param ty Must be of type <a href="Type.html">Type</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_vaarg
function Builder:build_vaarg(list, ty, name)
end

--- object method.
--
-- @param vecval Must be of type <a href="Value.html">Value</a>.
-- @param index Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_extract_element
function Builder:build_extract_element(vecval, index, name)
end

--- object method.
--
-- @param vecval Must be of type <a href="Value.html">Value</a>.
-- @param eltval Must be of type <a href="Value.html">Value</a>.
-- @param index Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_insert_element
function Builder:build_insert_element(vecval, eltval, index, name)
end

--- object method.
--
-- @param v1 Must be of type <a href="Value.html">Value</a>.
-- @param v2 Must be of type <a href="Value.html">Value</a>.
-- @param mask Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_shuffle_vector
function Builder:build_shuffle_vector(v1, v2, mask, name)
end

--- object method.
--
-- @param aggval Must be of type <a href="Value.html">Value</a>.
-- @param index Must be of type <code>integer</code>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_extract_value
function Builder:build_extract_value(aggval, index, name)
end

--- object method.
--
-- @param agg_val Must be of type <a href="Value.html">Value</a>.
-- @param elt_val Must be of type <a href="Value.html">Value</a>.
-- @param index Must be of type <code>integer</code>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_insert_value
function Builder:build_insert_value(agg_val, elt_val, index, name)
end

--- object method.
--
-- @param val Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_is_null
function Builder:build_is_null(val, name)
end

--- object method.
--
-- @param val Must be of type <a href="Value.html">Value</a>.
-- @param name Must be of type <code>string</code>.
-- @return <a href="Value.html">Value</a>.
-- @name Builder:build_is_not_null
function Builder:build_is_not_null(val, name)
end

